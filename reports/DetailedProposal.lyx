#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
MALSIM Detailed Proposal
\end_layout

\begin_layout Author
Drew Wicke
\end_layout

\begin_layout Standard
The multi-agent learning simulator (MALSIM) will be a simulator and benchmarking
 tool for multi-agent learning algorithms written in Java.
 The goal of MALSIM will be to provide multi-agent learning researchers
 a common framework in which to compare and test various MAL algorithms.
 MALSIM will help to eliminate some of the empirical testing issues that
 are prevalent in the multi-agent learning community.
\end_layout

\begin_layout Standard
MALSIM will be written in Java using the Netbeans 7.0.1 IDE.
 I plan to use the following packages:
\end_layout

\begin_layout Itemize
Gamut - Game theory game generator 
\begin_inset CommandInset citation
LatexCommand cite
key "nudelman2004run"

\end_inset


\end_layout

\begin_layout Itemize
MPJ - MPI for Java 
\begin_inset CommandInset citation
LatexCommand cite
key "bornemann2005mpj"

\end_inset


\end_layout

\begin_layout Itemize
XStream - XML serialization of Java objects 
\begin_inset CommandInset citation
LatexCommand cite
key "XStream"

\end_inset


\end_layout

\begin_layout Itemize
JChart2D - real time graphing library 
\begin_inset CommandInset citation
LatexCommand cite
key "JChartD,:LiveGraph"

\end_inset


\end_layout

\begin_layout Standard
Currently, MALSIM allows the user to interact with the GUI to:
\end_layout

\begin_layout Itemize
Create a 
\emph on
Batch
\emph default
 of 
\emph on
Tournaments
\end_layout

\begin_layout Itemize
Save and Load a 
\emph on
Batch 
\emph default
to and from XML
\end_layout

\begin_layout Itemize
Choose a 
\emph on
Game, Eliminator 
\emph default
and
\emph on
 AgentSelector
\emph default
 from a list
\end_layout

\begin_layout Itemize
Choose what 
\emph on
Agent
\emph default
(s) are to play in the 
\emph on
Game
\end_layout

\begin_layout Itemize
Set properties for the 
\emph on
Game
\emph default
, 
\emph on
Agent
\emph default
, 
\emph on
Eliminator,
\emph default
 and
\emph on
 AgentSelector
\end_layout

\begin_layout Itemize
Select a 
\emph on
Game
\emph default
 from the Gamut library 
\end_layout

\begin_layout Itemize
Start a 
\emph on
Batch
\emph default
 as a threaded operation
\end_layout

\begin_layout Itemize
Start a
\emph on
 
\emph default
multi-process 
\emph on
Batch 
\emph default
that uses MPJ
\end_layout

\begin_layout Itemize
Pause, resume and terminate 
\emph on
Tournaments
\end_layout

\begin_layout Itemize
View state of queued 
\emph on
Games 
\emph default
for a 
\emph on
Tournament
\end_layout

\begin_layout Itemize
View state of the 
\emph on
Tournaments
\emph default
 in the 
\emph on
Batch
\end_layout

\begin_layout Itemize
View a graph showing an agent's average reward per time step for a game
\end_layout

\begin_layout Standard
A simplified view of how 
\emph on
Batch
\emph default
, 
\emph on
Tournament
\emph default
, 
\emph on
Game
\emph default
 and 
\emph on
Agent
\emph default
 objects are structured is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Simplified-Batch-structure."

\end_inset

.
 Also, in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Current-GUI-that"

\end_inset

, the current GUI that allows the user to create 
\emph on
Tournaments
\emph default
 and set properties is shown.
\end_layout

\begin_layout Standard
I plan to extend current functionality by integrating MPJ, a Java implementation
 of MPI.
 I am choosing to add multi processing functionality using MPJ in order
 to shorten the runtime when benchmarking algorithms.
 In order to use MPJ, the user must have MPJ installed and start MALSIM
 as an MPJ process.
 MPJ will be used to create and manage 
\emph on
Game
\emph default
s.
 MPI classes will be added to use MPJ, as seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MPJ-integration-design"

\end_inset

.
 
\emph on
MPITourn
\emph default
 will create an 
\emph on
MPIGameRunner
\emph default
 using the 
\emph on
GameRunnerFactory
\emph default
.
 
\emph on
MPITourn
\emph default
 will create a user defined number of 
\emph on
MPIGameClient
\emph default
 processes.
 Therefore, when instantiating 
\emph on
MPIGameRunner
\emph default
 the id of the 
\emph on
MPIGameClient
\emph default
 process must be provided along with the 
\emph on
Game
\emph default
.
 Then the 
\emph on
MPIGameRunner
\emph default
 can handle the MPI communication with the 
\emph on
MPIGameClient
\emph default
.
 
\emph on
MPIGameClient
\emph default
 will act as a wrapper for received 
\emph on
Game
\emph default
 objects.
 By using the 
\emph on
GameRunnerFactory,
\emph default
 I am delegating the required interaction with 
\emph on
Games
\emph default
 and therefore, depending on whether the 
\emph on
Tournament
\emph default
 is MPI enabled, the correct communication protocol is followed.
 
\end_layout

\begin_layout Standard
One issue when writing multi-process programs is fault tolerance to failed
 processes.
 My first attempt to provide fault tolerance to MALSIM was hindered since
 MPJ doesn't notify the user that there was a failed process.
 MPJ will return as though the sent message was recieved.
 A recv process will stall if it calls recv on a dead proc for which no
 messages from that process are not in the Connection queue.
 My first attempt was to utilize MPJ's RegistryHandler to be notified when
 a process dies.
 This worked, however the time between the process dieing and the notification
 is about 1-2 minutes.
 Another MPI implementation for Java MPJ-Express also does not support error
 handling (http://mpj-express.org/docs/javadocs/index.html).
 
\end_layout

\begin_layout Standard
My second attempt was modeled after MPI-1 specifications where client operations
 such as send and recv will return an error if the operation is to go to
 a dead process 
\begin_inset CommandInset citation
LatexCommand cite
key "gropp2004fault"

\end_inset

.
 However, MPJ does not provide error mechanisms stating that for example
 a send operation can't be completed since the connection to the process
 was lost.
 Since MPJ is open source, I was able to modify 
\emph on
ConnectionTable
\emph default
 and 
\emph on
MPJ
\emph default
 classes in order to provide a means of letting the user know if their is
 a connection as seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Connection-Aware-MPJ"

\end_inset

.
 In the 
\emph on
ConnectionTable
\emph default
 class I changed 
\emph on
getConnection() 
\emph default
to utilize the method 
\emph on
Connection.isConnectionEstablished()
\emph default
 to check the connection between the send and recieving processes before
 returning a 
\emph on
Connection
\emph default
 from the ConnectionTable.
 However, 
\emph on
MPJ.init()
\emph default
 and 
\emph on
MPJ.finish() 
\emph default
both call 
\emph on
ConnectionTable.getConnection() 
\emph default
in order to setup or close a 
\emph on
Connection
\emph default
.
 So, in order for these methods to not throw an exception I made the 
\emph on
ConnectionTable.getUntestedConnection() 
\emph default
which will provide the 
\emph on
Connection
\emph default
 even if its not established.
 However, if I try to recv a message from a process that has disconnected
 I won't recieve any of the messages since the connection won't be established.
 This is bad design to link the recv queue with the Connection.
 If the two were seperate then this would have worked since the queue would
 have still been available even if the Connection is not established.
 
\end_layout

\begin_layout Standard
Finally, I decided to just make a method in MPJ that the user can call to
 check if their process is connected to the specified process seen in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Final-Connection-Aware"

\end_inset

.
 Therefore, I can check the connection before I send.
 I implemented this and tested again and then it seemed like if I probe
 the message the sent object disapears when I call recv.
 I finally realized that there is a bug in MPJ that incorrectly converts
 the stored probed message.
 I fixed this and I found anther bug that blocked the process when calling
 iprobe.
 The problem with this was that the iprobe method was checking the wrong
 variable to see if it was suposed to block.
 So I fixed this and then discovered that on MPJ's website that someone
 else had found this bug and proposed the same fix.
\end_layout

\begin_layout Standard
Based on looking at the code for MPJ I realized that if I have multiple
 threads running and trying to recv and probe for messages I will be running
 into a lot of waiting and possibly dead lock since MPJ locks on the recv
 connection queue when recv or probing for messages.
 So, there will be one class in its own thread that will oversee all of
 the MPI recv communications and will be given
\end_layout

\begin_layout Standard
One thing that may be a pain is that when the user saves a 
\emph on
Batch 
\emph default
in the threaded only version and then loads it into an MPI version mpi won't
 work and vice versa.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/FinalFTMPJ.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Final-Connection-Aware"

\end_inset

Final Connection Aware MPJ
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/FTMPJ.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Connection-Aware-MPJ"

\end_inset

Connection Aware MPJ
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This issue will be handled such that if a process fails then I can re-start
 the Game as a thread inside the MPIGameRunner.
 If the MPIGameRunner ever experiences 
\emph on
ConnectionLostException
\emph default
 I will assume that the 
\emph on
MPIGameClient
\emph default
 process has died.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/simpDesign.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Simplified-Batch-structure."

\end_inset

Simplified 
\emph on
Batch
\emph default
 structure.
 
\emph on
Batch
\emph default
 is composed of 
\emph on
Tournaments
\emph default
 and 
\emph on
Tournaments
\emph default
 are composed of 
\emph on
Games
\emph default
 and 
\emph on
Agents
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/mpidesign.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:MPJ-integration-design"

\end_inset

MPJ integration design diagram.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once MPJ features are fully functional, the 
\emph on
MainView
\emph default
 screen will display a list of running 
\emph on
Tournaments
\emph default
 with options to cancel, pause and resume 
\emph on
Tournaments
\emph default
.
 A use case would be:
\end_layout

\begin_layout Standard
User Pauses a Tournament
\end_layout

\begin_layout Standard
Pre-condition: Tournament is started
\end_layout

\begin_layout Enumerate
User chooses to pause a 
\emph on
Tournament
\end_layout

\begin_layout Enumerate
System is notified of the user's selection
\end_layout

\begin_layout Enumerate
System pauses the 
\emph on
Tournament
\end_layout

\begin_layout Enumerate
System notifies user that the 
\emph on
Tournament
\emph default
 is paused
\end_layout

\begin_layout Standard
The use cases for canceling and resuming 
\emph on
Tournaments
\emph default
 are similar.
 The class diagram is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BatchStateView-design-diagram."

\end_inset

.
 When the user starts the 
\emph on
Batch
\emph default
 the 
\emph on
BatchStateView
\emph default
 will display the running 
\emph on
Tournaments
\emph default
.
 The 
\emph on
BatchStateView
\emph default
 will allow the user to change the state of 
\emph on
Tournaments
\emph default
 through the 
\emph on
BatchStateController
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/BatchStateView.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BatchStateView-design-diagram."

\end_inset

BatchStateView design diagram.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next step is to write various multi-agent learning algorithms in order
 to better understand their capabilities.
 The first algorithm I plan on writing is the Adaptive Dynamic Learner algorithm
 
\begin_inset CommandInset citation
LatexCommand cite
key "burkov2007multiagent"

\end_inset

.
 I will then create rating and scoring mechanisms for the algorithms.
 The standard way to compare algorithms are the average reward and the average
 Bellman error (which is the difference between two successive updates of
 Q-values def.
 from ADL paper) per time step.
 Following the creation of the algorithms, a graphing library will be integrated
 in order to view statistics about the algorithms and game progress in real
 time and allow the user to save the charts as images.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/BatchScreen.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Current-GUI-that"

\end_inset

Current GUI that allows the user to create a 
\emph on
Batch
\emph default
 of 
\emph on
Tournaments
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliograph"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
