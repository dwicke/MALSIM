#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Title
Progress Report
\end_layout

\begin_layout Author
Drew Wicke
\end_layout

\begin_layout Standard
The multi-agent learning simulator (MALSIM) is a simulator and benchmarking
 tool for multi-agent learning algorithms written in Java.
 The goal of MALSIM is to provide multi-agent learning researchers a common
 framework in which to compare and test various MAL algorithms.
 MALSIM will help to eliminate some of the empirical testing issues that
 are prevalent in the multi-agent learning community.
\end_layout

\begin_layout Standard
MALSIM is written in Java using the Netbeans 7.0.1 IDE.
 The following packages are incorporated to add specific features:
\end_layout

\begin_layout Itemize
Gamut - Game theory game generator 
\begin_inset CommandInset citation
LatexCommand cite
key "nudelman2004run"

\end_inset


\end_layout

\begin_layout Itemize
MPJ - MPI for Java 
\begin_inset CommandInset citation
LatexCommand cite
key "bornemann2005mpj"

\end_inset


\end_layout

\begin_layout Itemize
XStream - XML serialization of Java objects 
\begin_inset CommandInset citation
LatexCommand cite
key "XStream"

\end_inset


\end_layout

\begin_layout Itemize
JChart2D - real time graphing library 
\begin_inset CommandInset citation
LatexCommand cite
key "JChartD,:LiveGraph"

\end_inset


\end_layout

\begin_layout Standard
Since the Detailed Proposal, MALSIM now allows the user to interact with
 the GUI to:
\end_layout

\begin_layout Itemize
Start a
\emph on
 
\emph default
multi-process 
\emph on
Batch 
\emph default
that uses MPJ
\end_layout

\begin_layout Itemize
Pause, resume and terminate 
\emph on
Tournaments safeley
\end_layout

\begin_layout Itemize
View state of queued 
\emph on
Games 
\emph default
for a 
\emph on
Tournament
\end_layout

\begin_layout Itemize
View state of the 
\emph on
Tournaments
\emph default
 in the 
\emph on
Batch
\end_layout

\begin_layout Itemize
Set number of threads/processes to use in 
\emph on
Tournament
\end_layout

\begin_layout Itemize
View a graph showing an agent's average reward per time step for a game
\end_layout

\begin_layout Itemize
Choose the Adaptive Dynamic Learner (ADL) algorithm as an agent
\end_layout

\begin_layout Standard
During the rest of the course I intend to add unit tests for the major classes
 and add minor features, such as saving the collected data to a file and
 improve the GUI.
 I also intend to research more multi-agent learning algorithms and if time
 permits implement and compare them to ADL using MALSIM.
 The source code is available online at https://github.com/dwicke/.
\end_layout

\end_body
\end_document
